{
  "app": {
    "Http": {
      "Controllers": {
        "Api": {
          "assistenceController.php": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Assistence;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Database\\QueryException;\nuse Illuminate\\Support\\Facades\\DB;\n\n\nclass assistenceController extends Controller\n{\n    //Funcion para obtener toda la lista de asistencia\n    public function index(){\n        $assistence= Assistence::all();\n\n        if($assistence->isEmpty()){\n            return response()->json(['message'=>'No hay empleados registrados'],200);\n        }\n        return response()->json($assistence,200);\n    }\n\n    //Funcion para obtener asistencia de un empleado por su id\n    public function show($employee_id){\n        $assistence=DB::select('select e.employee_id, a.time_entry,a.time_exit, a.work_completed, a.time_to_recover, a.break_completed, a.additional_time, a.dealy_breaks, a.lunch_time, a.justificacion,a.token, a.date FROM `assistence` as `a` INNER JOIN `employees` as `e` ON a.employee_id = e.id WHERE e.employee_id=?;', [$employee_id]);\n\n        if(!$assistence){\n            $data=[\n                'message'=> 'Asistencia de empleado no encontrada',\n                'status'=> 404\n            ];\n            return response()->json($data,404);\n        }\n\n        $data=[\n            'assistencia'=> $assistence,\n            'status'=> 200\n        ];\n\n        return response()->json($data,200);\n\n    }\n\n    //Funcion para almacenar un registro nuevo de asistencia\n    public function store(Request $request){\n        $validator = Validator::make($request->all(),[\n            'employee_id' => 'required|exists:employees,id',\n            'time_entry' => 'required',\n            'time_exit' => '',\n            'work_completed' => '',\n            'time_to_recover' => '',\n            'break_completed' => '',\n            'additional_time' => '',\n            'dealy_breaks' => '',\n            'lunch_time' => '',\n            'justificacion' => '',\n            'token' => '',\n            'date' => 'required'\n        ]);\n\n        if($validator->fails()){\n            $data = [\n                'message' => 'Error al validar los datos',\n                'errores' => $validator->errors(),\n                'status' => 400\n            ];\n            return response()->json($data, 400); // CambiÃ© a 400 porque es un error del cliente\n        }\n\n        try {\n            $assistence = Assistence::create([\n                'employee_id' => $request->employee_id,\n                'time_entry' => $request->time_entry,\n                'time_exit' => $request->time_exit,\n                'work_completed' => $request->work_completed,\n                'time_to_recover' => $request->time_to_recover,\n                'break_completed' => $request->break_completed,\n                'additional_time' => $request->additional_time,\n                'dealy_breaks' => $request->dealy_breaks,\n                'lunch_time' => $request->lunch_time,\n                'justificacion' => $request->justificacion,\n                'token' => $request->token,\n                'date' => $request->date\n            ]);\n        } catch (QueryException $e) {\n            return response()->json(['message' => 'Error al registrar nueva asistencia', 'error' => $e->getMessage(), 'status' => 500], 500);\n        }\n\n        $data = [\n            'message' => 'Se ha registrado una nueva asistencia',\n            'assistence' => $assistence,\n            'status' => 201\n        ];\n        return response()->json($data, 201);\n    }\n\n    //METODO PARA ACTUALIZAR\n\n    public function update(Request $request, $employee_id, $date)\n    {\n        $validator = Validator::make($request->all(), [\n            'time_entry' => '',\n            'time_exit' => '',\n            'work_completed' => '',\n            'time_to_recover' => '',\n            'break_completed' => '',\n            'additional_time' => '',\n            'dealy_breaks' => '',\n            'lunch_time' => '',\n            'justificacion' => '',\n            'token' => ''\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json([\n                'message' => 'Error al validar los datos',\n                'errores' => $validator->errors(),\n                'status' => 400\n            ], 400);\n        }\n\n        try {\n            $assistence = Assistence::where('employee_id', $employee_id)\n                ->where('date', $date)\n                ->firstOrFail();\n\n            $assistence->update([\n                'time_entry' => $request->time_entry,\n                'time_exit' => $request->time_exit,\n                'work_completed' => $request->work_completed,\n                'time_to_recover' => $request->time_to_recover,\n                'break_completed' => $request->break_completed,\n                'additional_time' => $request->additional_time,\n                'dealy_breaks' => $request->dealy_breaks,\n                'lunch_time' => $request->lunch_time,\n                'justificacion' => $request->justificacion,\n                'token' => $request->token                \n            ]);\n        } catch (QueryException $e) {\n            return response()->json([\n                'message' => 'Error al actualizar la asistencia',\n                'error' => $e->getMessage(),\n                'status' => 500\n            ], 500);\n        }\n\n        return response()->json([\n            'message' => 'Asistencia actualizada correctamente',\n            'assistence' => $assistence,\n            'status' => 200\n        ], 200);\n    }\n\n\n}\n"
        }
      }
    }
  }
}